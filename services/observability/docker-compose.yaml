services:
  #  ================== Monitoring services for monitoring the system ==================
  node-exporter:
    image: prom/node-exporter:latest
    hostname: node-exporter
    container_name: node-exporter
    restart: unless-stopped
    environment:
      NO_PROXY: localhost,prometheus,cadvisor,grafana,${NETWORK_SUBNET}
      no_proxy: localhost,prometheus,cadvisor,grafana,${NETWORK_SUBNET}
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - '9100:9100'
    networks:
      - text_to_image_retrieval_network
    env_file:
      - .env

  prometheus:
    image: prom/prometheus:latest
    hostname: prometheus
    container_name: prometheus
    restart: unless-stopped
    environment:
      NO_PROXY: localhost,node-exporter,cadvisor,grafana,alertmanager,app,${NETWORK_SUBNET}
      no_proxy: localhost,node-exporter,cadvisor,grafana,alertmanager,app,${NETWORK_SUBNET}
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./config/prometheus/alert-rules.yml:/etc/prometheus/alert-rules.yml
      - ./.data/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - '9090:9090'
    networks:
      - text_to_image_retrieval_network
    env_file:
      - .env

  alert-webhook:
    hostname: alert-webhook
    container_name: alert-webhook
    image: text-to-image-retrieval/alert-webhook
    restart: unless-stopped
    build:
      context: ./config/alertmanager
      dockerfile: Dockerfile
      args:
        ENTRY_PROXY: ${HTTPS_PROXY}
        DISCORD_WEBHOOK_URL: ${DISCORD_WEBHOOK_URL}
    environment:
      NO_PROXY: localhost,prometheus,node-exporter,cadvisor,grafana,alertmanager,${NETWORK_SUBNET}
      no_proxy: localhost,prometheus,node-exporter,cadvisor,grafana,alertmanager,${NETWORK_SUBNET}
    ports:
      - '5000:5000'
    networks:
      - text_to_image_retrieval_network
    env_file:
      - .env
  
  alertmanager:
    image: prom/alertmanager:latest
    hostname: alertmanager
    container_name: alertmanager
    restart: unless-stopped
    environment:
      NO_PROXY: localhost,prometheus,node-exporter,cadvisor,grafana,alert-webhook,${NETWORK_SUBNET}
      no_proxy: localhost,prometheus,node-exporter,cadvisor,grafana,alert-webhook,${NETWORK_SUBNET}
      HTTPS_PROXY: ${HTTPS_PROXY}
      HTTP_PROXY: ${HTTPS_PROXY}
    volumes:
      - ./config/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - ./.data/alertmanager:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    ports:
      - '9093:9093'
    networks:
      - text_to_image_retrieval_network
    env_file:
      - .env
  
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    hostname: cadvisor
    container_name: cadvisor
    restart: unless-stopped
    environment:
      NO_PROXY: localhost,prometheus,node-exporter,grafana,${NETWORK_SUBNET}
      no_proxy: localhost,prometheus,node-exporter,grafana,${NETWORK_SUBNET}
    ports:
    - 8080:8080
    volumes:
    - /:/rootfs:ro
    - /var/run:/var/run:rw
    - /sys:/sys:ro
    - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - text_to_image_retrieval_network

  grafana:
    image: grafana/grafana:latest
    hostname: grafana
    container_name: grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
      NO_PROXY: localhost,prometheus,node-exporter,cadvisor,${NETWORK_SUBNET}
      no_proxy: localhost,prometheus,node-exporter,cadvisor,${NETWORK_SUBNET}
      HTTPS_PROXY: ${HTTPS_PROXY}
      HTTP_PROXY: ${HTTPS_PROXY}
    ports:
      - '3030:3000'
    volumes:
      - ./.data/grafana:/var/lib/grafana
      - ./config/grafana/dashboards:/opt/grafana/dashboards
      - ./config/grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
      - ./config/grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 20s
      timeout: 10s
      retries: 3
    networks:
      - text_to_image_retrieval_network
    env_file:
      - .env

  #  ================== Logging services for logging the system ==================
  elasticsearch:
    image: text-to-image-retrieval/elasticsearch:8.15.1
    hostname: elasticsearch
    container_name: elasticsearch
    build: 
      context: ./config/elasticsearch
      dockerfile: Dockerfile
      args:
        ENTRY_PROXY: ${HTTPS_PROXY}
    restart: unless-stopped
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      NO_PROXY: localhost,fluent-bit,kibana,${NETWORK_SUBNET}
      no_proxy: localhost,fluent-bit,kibana,${NETWORK_SUBNET}
    ports:
      - '9200:9200'
    volumes:
      - ./.data/elasticsearch:/usr/share/elasticsearch/data
      - ./config/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    entrypoint: /usr/share/elasticsearch/entrypoint.sh
    healthcheck:
      test: ["CMD", "curl", "-f", "-u", "elastic:${ELASTIC_PASSWORD}", "http://localhost:9200/_cluster/health?pretty"]
      interval: 30s
      start_period: 60s
      timeout: 10s
      retries: 50
    networks:
      - text_to_image_retrieval_network
    env_file:
      - .env

  kibana:
    image: docker.elastic.co/kibana/kibana:8.15.1                   
    hostname: kibana
    container_name: kibana
    restart: unless-stopped
    environment:
      NO_PROXY: localhost,elasticsearch,fluent-bit,${NETWORK_SUBNET}
      no_proxy: localhost,elasticsearch,fluent-bit,${NETWORK_SUBNET}
    ports:
      - '5601:5601'
    volumes:
      - ./config/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
    depends_on:
      - elasticsearch
    networks:
      - text_to_image_retrieval_network
    env_file:
      - .env

  fluent-bit:
    image: fluent/fluent-bit:3.1.4-debug
    hostname: fluent-bit
    container_name: fluent-bit
    restart: unless-stopped
    environment:
      NO_PROXY: localhost,kibana,elasticsearch,${NETWORK_SUBNET}
      no_proxy: localhost,kibana,elasticsearch,${NETWORK_SUBNET}
      HTTPS_PROXY: ${HTTPS_PROXY}
      HTTP_PROXY: ${HTTPS_PROXY}
    ports:
      - '2021:2021'
    volumes:
      - ./config/fluentbit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
      - ./config/fluentbit/parsers.conf:/fluent-bit/etc/parsers.conf
      - ./config/fluentbit/time_format.lua:/fluent-bit/etc/time_format.lua
      - ./.data/fluentbit:/var/log
      - ./../app/logs:/app/logs:ro # Read-only bind mount to read app service logs
      - ./../model_serving/logs:/model_serving/logs:ro # Read-only bind mount to read model-serving service logs
      - /var/lib/docker/containers:/var/lib/docker/containers:ro # Read-only bind mount to read container logs
      - /var/run/docker.sock:/var/run/docker.sock:ro # Read-only bind mount to read the Docker socket
    depends_on:
      - elasticsearch
    networks:
      - text_to_image_retrieval_network
    env_file:
      - .env

networks:
  text_to_image_retrieval_network:
    name: text_to_image_retrieval_network
    external: true
